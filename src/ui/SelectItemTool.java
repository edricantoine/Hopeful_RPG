package ui;

import model.Item;
import model.PlayerCharacter;
import model.levelStuff.NewRoom;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

//Class representing the screen where the user chooses an item to use in battle

public class SelectItemTool {
    private NewRoom room; //Room the battle is taking place in
    private List<JButton> buttons;
    private List<Item> inventory; //Inventory of the room
    private PlayerCharacter user; //User of the item
    private Battle battle; //Battle taking place
    private JPanel ItemSelectPanel;
    private JButton button1;
    private JButton button2;
    private JButton button3;
    private JButton button4;
    private JButton button5;
    private JButton button6;
    private JButton button7;
    private JButton button8;
    private JButton button9;
    private JButton button10;

    public SelectItemTool(NewRoom r, List<Item> inv, PlayerCharacter user, Battle bat) {
        buttons = new ArrayList<>();
        buttons.add(button1);
        buttons.add(button2);
        buttons.add(button3);
        buttons.add(button4);
        buttons.add(button5);
        buttons.add(button6);
        buttons.add(button7);
        buttons.add(button8);
        buttons.add(button9);
        buttons.add(button10);
        room = r;
        inventory = inv;
        this.user = user;
        battle = bat;
        initializeButtons();
        JFrame frame = new JFrame("Select Target");
        frame.setContentPane(ItemSelectPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
            for (JButton b : battle.oButtons) {
                b.setEnabled(false);
            }

            for (JButton b : battle.jButtons) {
                b.setEnabled(false);
            }

            for (JButton b : battle.bButtons) {
                b.setEnabled(false);
            }

            for (JButton b : battle.tButtons) {
                b.setEnabled(false);
            }

        battle.itemButton.setEnabled(false);
        battle.itemButton1.setEnabled(false);
        battle.itemButton2.setEnabled(false);
        battle.itemButton3.setEnabled(false);
    }

    public void initializeButtons() { //sets up button labels, tooltips, listeners
        for (int i = 0; i < Math.min(room.getInventory().size(), buttons.size()); i++) {
            buttons.get(i).setText(room.getInventory().get(i).getName());
        }
        initializeTooltips();
        initializeListeners();
    }

    public void initializeTooltips() { //sets tooltip for a button to its respective item's flavor text
        for (int i = 0; i < Math.min(room.getInventory().size(), buttons.size()); i++) {
            buttons.get(i).setToolTipText(room.getInventory().get(i).getFlavor());
        }
    }

    public void initializeListeners() { //initializes action listeners. Creates a new SelectItemTargetTool screen if
        // a button is assigned to an item in the inventory.
        for (int i = 0; i < Math.min(room.getInventory().size(), buttons.size()); i++) {
            int finalI = i;
            buttons.get(i).addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    new SelectItemTargetTool(room, room.getInventory().get(finalI), user, battle);
                    Component cButton = (Component) e.getSource();
                    SwingUtilities.getWindowAncestor(cButton).dispose();
                }
            });
        }

        for (int i = 0; i < buttons.size(); i++) {
            String text = buttons.get(i).getText();
            if (text.equals("N/A")) { //If a button is labeled N/A, simply closes this screen
                buttons.get(i).addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        Component cButton = (Component) e.getSource();
                        SwingUtilities.getWindowAncestor(cButton).dispose();
                        battle.refreshButtons();
                    }
                });
            }
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        ItemSelectPanel = new JPanel();
        ItemSelectPanel.setLayout(new GridBagLayout());
        ItemSelectPanel.setBackground(new Color(-4988956));
        final JPanel spacer1 = new JPanel();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        ItemSelectPanel.add(spacer1, gbc);
        button2 = new JButton();
        Font button2Font = this.$$$getFont$$$("Courier New", -1, -1, button2.getFont());
        if (button2Font != null) button2.setFont(button2Font);
        button2.setText("N/A");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        ItemSelectPanel.add(button2, gbc);
        button3 = new JButton();
        Font button3Font = this.$$$getFont$$$("Courier New", -1, -1, button3.getFont());
        if (button3Font != null) button3.setFont(button3Font);
        button3.setText("N/A");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        ItemSelectPanel.add(button3, gbc);
        button4 = new JButton();
        Font button4Font = this.$$$getFont$$$("Courier New", -1, -1, button4.getFont());
        if (button4Font != null) button4.setFont(button4Font);
        button4.setText("N/A");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        ItemSelectPanel.add(button4, gbc);
        button1 = new JButton();
        Font button1Font = this.$$$getFont$$$("Courier New", -1, -1, button1.getFont());
        if (button1Font != null) button1.setFont(button1Font);
        button1.setText("N/A");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        ItemSelectPanel.add(button1, gbc);
        button5 = new JButton();
        Font button5Font = this.$$$getFont$$$("Courier New", -1, -1, button5.getFont());
        if (button5Font != null) button5.setFont(button5Font);
        button5.setText("N/A");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        ItemSelectPanel.add(button5, gbc);
        button6 = new JButton();
        Font button6Font = this.$$$getFont$$$("Courier New", -1, -1, button6.getFont());
        if (button6Font != null) button6.setFont(button6Font);
        button6.setText("N/A");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        ItemSelectPanel.add(button6, gbc);
        button7 = new JButton();
        Font button7Font = this.$$$getFont$$$("Courier New", -1, -1, button7.getFont());
        if (button7Font != null) button7.setFont(button7Font);
        button7.setText("N/A");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 7;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        ItemSelectPanel.add(button7, gbc);
        button8 = new JButton();
        Font button8Font = this.$$$getFont$$$("Courier New", -1, -1, button8.getFont());
        if (button8Font != null) button8.setFont(button8Font);
        button8.setText("N/A");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 8;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        ItemSelectPanel.add(button8, gbc);
        button9 = new JButton();
        Font button9Font = this.$$$getFont$$$("Courier New", -1, -1, button9.getFont());
        if (button9Font != null) button9.setFont(button9Font);
        button9.setText("N/A");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 9;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        ItemSelectPanel.add(button9, gbc);
        button10 = new JButton();
        Font button10Font = this.$$$getFont$$$("Courier New", -1, -1, button10.getFont());
        if (button10Font != null) button10.setFont(button10Font);
        button10.setText("N/A");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 10;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        ItemSelectPanel.add(button10, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return ItemSelectPanel;
    }
}
