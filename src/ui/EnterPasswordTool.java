package ui;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

//A class representing the screen where the player can enter a password to regain progress (think Mega Man (NES)).

public class EnterPasswordTool {
    private JTextField textField1;
    private JButton enterButton;
    private JLabel pLabel;
    private JPanel passPanel;
    private List<String> validPass; //all valid passwords. Will be updated as new levels come

    public EnterPasswordTool() {
        validPass = new ArrayList<>();
        validPass.add("ab42pgf9"); //these values were arbitrarily chosen
        validPass.add("b0wwg5gn");

        setUpButton();
        JFrame frame = new JFrame("Enter password");
        frame.setContentPane(passPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);

    }

    public void setUpButton() {
        enterButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String enteredPass = textField1.getText();
                if (enteredPass.length() == 0) {
                    Toolkit.getDefaultToolkit().beep();
                } else {
                    if (!validPass.contains(enteredPass)) {
                        Toolkit.getDefaultToolkit().beep();
                    } else {
                        if (enteredPass.equals("ab42pgf9")) {
                            Component cButton = (Component) e.getSource();
                            SwingUtilities.getWindowAncestor(cButton).dispose();
                            new LevelSelectUI(true, false, false);
                        } else if (enteredPass.equals("b0wwg5gn")) {
                            Component cButton = (Component) e.getSource();
                            SwingUtilities.getWindowAncestor(cButton).dispose();
                            new LevelSelectUI(true, true, false); //levels completed up to a certain point for each password
                        }
                    }
                }
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        passPanel = new JPanel();
        passPanel.setLayout(new GridBagLayout());
        passPanel.setBackground(new Color(-4988956));
        textField1 = new JTextField();
        Font textField1Font = this.$$$getFont$$$("Courier New", -1, -1, textField1.getFont());
        if (textField1Font != null) textField1.setFont(textField1Font);
        textField1.setText("");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        passPanel.add(textField1, gbc);
        enterButton = new JButton();
        enterButton.setText("Enter");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        passPanel.add(enterButton, gbc);
        pLabel = new JLabel();
        Font pLabelFont = this.$$$getFont$$$("Courier New", -1, -1, pLabel.getFont());
        if (pLabelFont != null) pLabel.setFont(pLabelFont);
        pLabel.setText("Enter password here.");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        passPanel.add(pLabel, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return passPanel;
    }

}
